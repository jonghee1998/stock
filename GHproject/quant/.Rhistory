abline(h = mean(AAPL$close), col = 'red') # mean value를 수평선으로 넣어줌
# 3.2. 기간내 변동성애 대한 그래프
plot(AAPL$rtn, type = 'l', col = 'blue', main = 'Stock Price of AAPL', cex.main = 1)
mtext('Variability') # 소제목
abline(h = 0, col = 'green') # mean value를 수평선으로 넣어줌
# 3.1. 기간내 종가에 대한 그래프
plot(AAPL$close, type = 'l', col = 'blue', main = 'Stock Price of AAPL', cex.main = 1)
mtext('Closed Price') # 소제목
abline(h = mean(AAPL$close), col = 'red') # mean value를 수평선으로 넣어줌
# 3.1. 기간내 종가에 대한 그래프
plot(AAPL$close, type = 'l', col = 'blue', main = 'Stock Price of AAPL', cex.main = 1)
mtext('Closed Price') # 소제목
abline(h = mean(AAPL$close), col = 'red') # mean value를 수평선으로 넣어줌
# 3.2. 기간내 변동성애 대한 그래프
plot(AAPL$rtn, type = 'l', col = 'blue', main = 'Stock Price of AAPL', cex.main = 1)
mtext('Variability') # 소제목
abline(h = 0, col = 'green') # mean value를 수평선으로 넣어줌
View(AAPL)
ind_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_FS.csv")
View(ind_FS)
# 3.1. 기간내 종가에 대한 그래프
plot(AAPL$close, type = 'l', col = 'blue', main = 'Stock Price of AAPL', cex.main = 1)
mtext('Closed Price') # 소제목
abline(h = mean(AAPL$close), col = 'red') # mean value를 수평선으로 넣어줌
# 3.2. 기간내 변동성애 대한 그래프
plot(AAPL$rtn, type = 'l', col = 'blue', main = 'Stock Price of AAPL', cex.main = 1)
mtext('Variability') # 소제목
abline(h = 0, col = 'green') # mean value를 수평선으로 넣어줌
# 3.1. 기간내 종가에 대한 그래프
plot(AAPL$close, type = 'l', col = 'blue', main = 'Stock Price of AAPL', cex.main = 1)
mtext('Closed Price') # 소제목
abline(h = mean(AAPL$close), col = 'red') # mean value를 수평선으로 넣어줌
# 3.2. 기간내 변동성애 대한 그래프
plot(AAPL$rtn, type = 'l', col = 'blue', main = 'Stock Price of AAPL', cex.main = 1)
mtext('Variability') # 소제목
abline(h = 0, col = 'green') # mean value를 수평선으로 넣어줌
install.packages(c("rvest", "dplyr", "purrr"))
library(rvest)
library(dplyr)
library(purrr)
# 웹페이지의 URL
url <- "https://www.glassdoor.com/research/job-market-report-historical/"
# 웹페이지 읽기
webpage <- read_html(url)
# 다운로드 링크 추출
download_links <- webpage %>%
html_nodes(css = 'a') %>% # 'a' tag 선택 (링크를 포함하는 HTML 태그)
html_attr('href') %>% # href 속성 추출
.[str_detect(., ".csv$")] # .csv 파일만 선택
library(stringr)
# 다운로드 링크 추출
download_links <- webpage %>%
html_nodes(css = 'a') %>% # 'a' tag 선택 (링크를 포함하는 HTML 태그)
html_attr('href') %>% # href 속성 추출
.[str_detect(., ".csv$")] # .csv 파일만 선택
# 폴더를 생성합니다 (필요시)
dir.create("downloads")
# 각 링크에 대해 download.file 함수를 사용하여 파일을 다운로드
download_links %>%
map(~download.file(url = ., destfile = paste0("downloads/", basename(.))))
# 웹페이지의 URL
url <- "https://www.glassdoor.com/research/job-market-report-historical/"
# 웹페이지 읽기
webpage <- read_html(url)
# 다운로드 링크 추출
download_links <- webpage %>%
html_nodes(css = '2020') %>% # 'a' tag 선택 (링크를 포함하는 HTML 태그)
html_attr('href') %>% # href 속성 추출
.[str_detect(., ".csv$")] # .csv 파일만 선택
# 폴더를 생성합니다 (필요시)
dir.create("downloads")
# 각 링크에 대해 download.file 함수를 사용하여 파일을 다운로드
download_links %>%
map(~download.file(url = ., destfile = paste0("downloads/", basename(.))))
# 웹페이지의 URL
url <- "https://www.glassdoor.com/research/job-market-report-historical/"
# 웹페이지 읽기
webpage <- read_html(url)
# 월별 링크 추출
months <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
years <- 2019:2020
download_links <- c()
for (year in years) {
for (month in months) {
link <- webpage %>%
html_nodes(xpath = paste0('//a[text()="', month, ' ', year, '"]')) %>% # 특정 텍스트를 가진 링크 선택
html_attr('href') # href 속성 추출
download_links <- c(download_links, link)
}
}
# 폴더를 생성합니다 (필요시)
dir.create("downloads")
# 웹페이지의 URL
url <- "https://www.glassdoor.com/research/job-market-report-historical/"
# 웹페이지 읽기
webpage <- read_html(url)
# 월별 링크 추출
months <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
years <- 2019:2020
download_links <- c()
for (year in years) {
for (month in months) {
link <- webpage %>%
html_nodes(xpath = paste0('//a[text()="', month, ' ', year, '"]')) %>% # 특정 텍스트를 가진 링크 선택
html_attr('href') # href 속성 추출
download_links <- c(download_links, link)
}
}
# 폴더를 생성합니다 (필요시)
dir.create("downloads")
# 각 링크에 대해 download.file 함수를 사용하여 파일을 다운로드
download_links %>%
map(~download.file(url = ., destfile = paste0("downloads/", basename(.))))
install.packages(c("rvest", "dplyr", "purrr"))
library(rvest)
library(dplyr)
install.packages(c("rvest", "dplyr", "purrr"))
# 웹페이지의 URL
url <- "https://www.glassdoor.com/research/job-market-report-historical/"
# 웹페이지 읽기
webpage <- read_html(url)
# 월별 링크 추출
months <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
years <- 2016:2020
download_links <- c()
for (year in years) {
for (month in months) {
link <- webpage %>%
html_nodes(xpath = paste0('//a[text()="', month, ' ', year, '"]')) %>% # 특정 텍스트를 가진 링크 선택
html_attr('href') # href 속성 추출
download_links <- c(download_links, link)
}
}
# 폴더를 생성합니다 (필요시)
dir.create("sejun")
# 각 링크에 대해 download.file 함수를 사용하여 파일을 다운로드
download_links %>%
map(~download.file(url = ., destfile = paste0("downloads/", basename(.))))
# 웹페이지의 URL
url <- "https://www.glassdoor.com/research/job-market-report-historical/"
# 웹페이지 읽기
webpage <- read_html(url)
# 월별 링크 추출
months <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
years <- 2016:2020
download_links <- c()
for (year in years) {
for (month in months) {
link <- webpage %>%
html_nodes(xpath = paste0('//a[text()="', month, ' ', year, '"]')) %>% # 특정 텍스트를 가진 링크 선택
html_attr('href') # href 속성 추출
download_links <- c(download_links, link)
}
}
# 폴더를 생성합니다 (필요시)
dir.create("sejun")
# 각 링크에 대해 download.file 함수를 사용하여 파일을 다운로드
download_links %>%
map(~download.file(url = ., destfile = paste0("downloads/", basename(.))))
# 각 링크에 대해 download.file 함수를 사용하여 파일을 다운로드
download_links %>%
map(~download.file(url = ., destfile = paste0("sejun/", basename(.))))
library(data.table)
# describe the files and order in which they should be executed
source('./load data/load_news.R')  # function which run the script
source('./load data/load_KOSPI.R')
source('./load data/load_FinState.R')
source('./load data/load_KR_Stock.R')
source('./load data/load_US_STOCK.R') # for US case only
rm(list = ls())
entire_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/Entire_FS.csv")
ind_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_FS.csv")
stock_KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSPI.csv")
stock_KOSDAQ <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSDAQ.csv")
stock_ind <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.csv")
news <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/news.csv")
KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/KOSPI.csv")
View(entire_FS)
View(ind_FS)
View(ind_FS)
View(stock_ind)
library(data.table)
# describe the files and order in which they should be executed
source('./load data/load_news.R')  # function which run the script
source('./load data/load_KOSPI.R')
source('./load data/load_FinState.R')
source('./load data/load_KR_Stock.R')
source('./load data/load_US_STOCK.R') # for US case only
rm(list = ls())
entire_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/Entire_FS.csv")
ind_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_FS.csv")
stock_KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSPI.csv")
stock_KOSDAQ <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSDAQ.csv")
stock_ind <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.csv")
news <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/news.csv")
KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/KOSPI.csv")
View(entire_FS)
View(ind_FS)
View(KOSPI)
View(stock_ind)
View(stock_KOSDAQ)
View(stock_KOSPI)
View(stock_ind)
View(stock_KOSDAQ)
View(KOSPI)
View(ind_FS)
View(ind_FS)
View(entire_FS)
View(ind_FS)
View(KOSPI)
View(news)
View(stock_ind)
View(stock_ind)
View(stock_KOSDAQ)
View(stock_KOSDAQ)
View(stock_KOSPI)
View(stock_ind)
#################################################### KR IND STOCK ########################################################################
today <- Sys.Date()
from_date <- as.Date("2010-01-01")
ticker = '005930.KS' # Named by_ Yahoo finance
stock <- getSymbols(ticker,
from = from_date, to = today,
auto.assign = FALSE)
View(stock)
stock<-adjustOHLC(stock,use.Adjusted = T)
stock<-adjustOHLC(stock,use.Adjusted = T)
stock
colnames(stock)<-c('open','high','low','close','volume','adjusted') #컬럼명 변경
View(stock)
save(stock, file = '~/Desktop/JH/personal/GHproject/quant/loaded data/stock.RData')
rm(list = ls())
load("stock.RData")
load("~/Desktop/JH/personal/GHproject/quant/loaded data/stock.RData")
rm(list = ls())
entire_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/Entire_FS.csv")
ind_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_FS.csv")
stock_KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSPI.csv")
stock_KOSDAQ <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSDAQ.csv")
stock_ind <- load("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.RData")
news <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/news.csv")
KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/KOSPI.csv")
stock_ind <- load("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.RData")
load("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.RData")
load("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.RData")
source('./load data/load_KR_Stock.R')
rm(list = ls())
entire_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/Entire_FS.csv")
ind_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_FS.csv")
stock_KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSPI.csv")
stock_KOSDAQ <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSDAQ.csv")
load("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.RData")
news <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/news.csv")
KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/KOSPI.csv")
rm(list = ls())
entire_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/Entire_FS.csv")
ind_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_FS.csv")
stock_KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSPI.csv")
stock_KOSDAQ <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSDAQ.csv")
load("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.RData")
news <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/news.csv")
KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/KOSPI.csv")
library(data.table)
source('./load data/load_FinState.R')
rm(list = ls())
entire_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/Entire_FS.csv")
ind_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_FS.csv")
stock_KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSPI.csv")
stock_KOSDAQ <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSDAQ.csv")
load("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.RData")
news <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/news.csv")
KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/KOSPI.csv")
library(quantmod)
library(httr)
library(rvest)
library(jsonlite)
#################################################### KR IND STOCK ########################################################################
today <- Sys.Date()
from_date <- as.Date("2010-01-01")
ticker = '005930.KS' # Named by_ Yahoo finance
stock <- getSymbols(ticker,
from = from_date, to = today,
auto.assign = FALSE)
stock<-adjustOHLC(stock,use.Adjusted = T)
stock
colnames(stock)<-c('open','high','low','close','volume','adjusted') #컬럼명 변경
# 국내 종목은 종종 수정주가에 오류가 발생하는 경우가 많아서 배당이 반영된 값보다는 단순 종가(Close) 데이터를 사용하기를 권장합니다.
save(stock, file = '~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.RData')
rm(list = ls())
entire_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/Entire_FS.csv")
ind_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_FS.csv")
stock_KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSPI.csv")
stock_KOSDAQ <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSDAQ.csv")
load("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.RData")
news <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/news.csv")
KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/KOSPI.csv")
ind_stock<-load("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.RData")
library(data.table)
# describe the files and order in which they should be executed
source('./load data/load_news.R')  # function which run the script
source('./load data/load_KOSPI.R')
source('./load data/load_FinState.R')
source('./load data/load_KR_Stock.R')
source('./load data/load_US_STOCK.R') # for US case only
rm(list = ls())
entire_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/Entire_FS.csv")
ind_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_FS.csv")
stock_KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSPI.csv")
stock_KOSDAQ <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSDAQ.csv")
load("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.RData")
news <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/news.csv")
KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/KOSPI.csv")
View(ind_stock)
chart_Series(ind_stock)
chartSeries(ind_stock,
type="auto",
subset='2007-05-10::2007-05-30',
theme=chartTheme('white'))
View(KOSPI)
View(ind_stock)
chartSeries(ind_stock,
type="auto",
subset='2023-07-10::2023-08-05',
theme=chartTheme('white'))
chartSeries(ind_stock,
type="auto",
subset='2023-05-10::2023-08-05',
theme=chartTheme('white'))
View(ind_FS)
View(ind_stock)
View(KOSPI)
View(news)
View(stock_KOSDAQ)
View(stock_KOSPI)
library(httr)
library(dplyr)
library(rvest)
function (query, package = "R", lib.loc = NULL, format = NULL,
reader = NULL, db = NULL)
library(xts)
library(lubridate)
data = list()
tryCatch({ # url 생성
for(j in 1:20) #j=1
{
url = paste0('https://finance.naver.com/sise/sise_index_day.nhn?code=KOSPI&page=',j)
down_table = GET(url)
Sys.setlocale("LC_ALL", "English")
table = read_html(down_table, encoding = "EUC-KR") %>%
html_table(fill = TRUE)
mytable = table[[1]]
Sys.setlocale("LC_ALL", "Korean")
mytable = na.omit(mytable) #NA 행 제거
rownames(mytable) = NULL
data[[j]] = mytable
Sys.sleep(0.01)
}
}, error = function(e) {# 오류 발생시 해당 종목명을 출력하고 다음 루프로 이동
warning(paste0("Error"))
})
data2 = do.call(rbind, data)
KS11 = data2[order(data2$날짜),][,1:2]
KS11 = data.frame(KS11)
rownames(KS11) = ymd(KS11[, 1])
KS11$체결가 = lapply( KS11$체결가, function(x) as.numeric(gsub("[+-,]", "", x)))
KS11$체결가 = unlist(KS11$체결가)
KS11[, 1] = NULL
KS11 = KS11 %>% as.xts()
tail(KS11)
as.data.frame(KS11)
fwrite(KS11, file = '~/Desktop/JH/personal/GHproject/quant/loaded data/KOSPI.csv')
library(dygraphs)
dygraph(KS11)
fwrite(KS11, file = '~/Desktop/JH/personal/GHproject/quant/loaded data/KOSPI.csv')
chart_Series(ind_stock)
chartSeries(ind_stock,
type="auto",
subset='2023-05-10::2023-08-05',
theme=chartTheme('white'))
rm(list = ls())
entire_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/Entire_FS.csv")
ind_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_FS.csv")
stock_KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSPI.csv")
stock_KOSDAQ <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSDAQ.csv")
load("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.RData")
news <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/news.csv")
KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/KOSPI.csv")
chart_Series(ind_stock)
chartSeries(ind_stock,
type="auto",
subset='2023-05-10::2023-08-05',
theme=chartTheme('white'))
library(xts)
library(quantmod)
# 0. Set tickers + Date
today <- Sys.Date()
from_date <- as.Date("2020-01-01")
ticker = c('AAPL', 'NDIV') # Name_ Yahoo finance
# 1. Bring Stock Chart
data = getSymbols(ticker,
from = from_date, to = today,
auto.assign = TRUE)
# 1.1. Pre-processing
colnames(AAPL) <- c('open', 'high', 'low', 'close', 'volume', 'adjusted')
AAPL <- AAPL[Vo(AAPL)>1] # 거래량 0인 row 삭제
AAPL$rtn <- ROC(Cl(AAPL))*100 # 일일 종가의 변화율 계산: 일일 수익률 (% 아님)
AAPL <- na.omit(AAPL) # 결측지 제거
# 2. 기간평균수익률 / 기간수익률변동성 계산
nrow <- nrow(AAPL)
drift <- mean(AAPL$rtn)*nrow*100 # drift = 기간 평균 수익률 (%) : 일일평균수익률 x 총 거래일
volatility <- sd(AAPL$rtn)*sqrt(nrow) # volatility = 기간 수익률의 변동성 (%) : sd(일일수익률) x sqrt(총 거래일)
# 3.1. 기간내 종가에 대한 그래프
plot(AAPL$close, type = 'l', col = 'blue', main = 'Stock Price of AAPL', cex.main = 1)
mtext('Closed Price') # 소제목
abline(h = mean(AAPL$close), col = 'red') # mean value를 수평선으로 넣어줌
# 3.2. 기간내 변동성애 대한 그래프
plot(AAPL$rtn, type = 'l', col = 'blue', main = 'Stock Price of AAPL', cex.main = 1)
mtext('Variability') # 소제목
abline(h = 0, col = 'green') # mean value를 수평선으로 넣어줌
source('./load data/load_KOSPI.R')
library(httr)
library(dplyr)
library(rvest)
library(xts)
library(lubridate)
data = list()
tryCatch({ # url 생성
for(j in 1:20) #j=1
{
url = paste0('https://finance.naver.com/sise/sise_index_day.nhn?code=KOSPI&page=',j)
down_table = GET(url)
Sys.setlocale("LC_ALL", "English")
table = read_html(down_table, encoding = "EUC-KR") %>%
html_table(fill = TRUE)
mytable = table[[1]]
Sys.setlocale("LC_ALL", "Korean")
mytable = na.omit(mytable) #NA 행 제거
rownames(mytable) = NULL
data[[j]] = mytable
Sys.sleep(0.01)
}
}, error = function(e) {# 오류 발생시 해당 종목명을 출력하고 다음 루프로 이동
warning(paste0("Error"))
})
data2 = do.call(rbind, data)
KS11 = data2[order(data2$날짜),][,1:2]
KS11 = data.frame(KS11)
source('./load data/load_KOSPI.R')
rm(list = ls())
entire_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/Entire_FS.csv")
ind_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_FS.csv")
stock_KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSPI.csv")
View(stock_KOSPI)
View(stock_KOSPI)
chartSeries(ind_stock,
type="auto",
subset='2023-05-10::2023-08-05',
theme=chartTheme('white'))
KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/KOSPI.csv")
View(KOSPI)
rm(list = ls())
entire_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/Entire_FS.csv")
ind_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_FS.csv")
stock_KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSPI.csv")
stock_KOSDAQ <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSDAQ.csv")
load("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.RData")
news <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/news.csv")
KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/KOSPI.csv")
View(ind_stock)
rm(list = ls())
entire_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/Entire_FS.csv")
ind_FS <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_FS.csv")
stock_KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSPI.csv")
stock_KOSDAQ <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/stock_KOSDAQ.csv")
load("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.RData")
news <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/news.csv")
KOSPI <- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/KOSPI.csv")
chart_Series(ind_stock)
chartSeries(ind_stock,
type="auto",
subset='2023-05-10::2023-08-05',
theme=chartTheme('white'))
View(ind_stock)
View(ind_stock)
library(xts)
library(quantmod)
library(httr)
library(rvest)
library(jsonlite)
library(xts)
#################################################### KR IND STOCK ########################################################################
today <- Sys.Date()
from_date <- as.Date("2010-01-01")
ticker = '005930.KS' # Named by_ Yahoo finance
ind_stock <- getSymbols(ticker,
from = from_date, to = today,
auto.assign = FALSE)
ind_stock<-adjustOHLC(ind_stock,use.Adjusted = T)
colnames(ind_stock)<-c('open','high','low','close','volume','adjusted') #컬럼명 변경
# 국내 종목은 종종 수정주가에 오류가 발생하는 경우가 많아서 배당이 반영된 값보다는 단순 종가(Close) 데이터를 사용하기를 권장합니다.
save(ind_stock, file = '~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.RData')
write.csv(ind_stock, "ind_stock.csv")
write.csv(ind_stock, "ind_stock.csv")
write.csv(ind_stock, file = '~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.csv')
ind_stock<- read.csv("~/Desktop/JH/personal/GHproject/quant/loaded data/ind_stock.csv")
View(ind_stock)
data <- c(12,14,14,14,15,16,16,17,18,18,18,19)
hist(data)
boxplot(data)
hist(data)
boxplot(data)
boxplot(data)
